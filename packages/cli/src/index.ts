#!/usr/bin/env tsx

import { Command } from 'commander';
import fs from 'fs';
import path from 'path';
import chalk from 'chalk'
import { pathToFileURL } from 'url';
import { generateProtoFromRouter } from '@zrpc/core';

const program = new Command();
program
  .command('generate')
  .description('Generate the proto definition from a zRPC router')
  .option('-i, --input <path>', 'Path to the input file with the exported appRouter')
  .option('-o, --output <path>', 'Path to the output file for the generated proto string')
  .action(async (options) => {
    try {
      const inputFile = path.resolve(process.cwd(), options.input);
      const outputFile = path.resolve(process.cwd(), options.output);

      console.log(chalk.blueBright(`Loading router from: ${inputFile}`));
      const inputFileURL = pathToFileURL(inputFile).href;
      const { appRouter } = await import(inputFileURL);

      if (!appRouter) {
        throw new Error(`Could not find exported 'appRouter' in ${inputFile}`);
      }

      const protoContent = generateProtoFromRouter(appRouter);
      const tsContent = `// This file is auto-generated by zRPC. Do not edit.\nexport const proto = \`${protoContent}\`;\n`;

      fs.writeFileSync(outputFile, tsContent, { encoding: 'utf-8' });
      console.log(chalk.greenBright(`✅ Proto definition generated successfully at: ${outputFile}`));

    } catch (error) {
      console.error(chalk.redBright('❌ Error generating proto:', error));
      process.exit(1);
    }
  });

program.parse(process.argv);